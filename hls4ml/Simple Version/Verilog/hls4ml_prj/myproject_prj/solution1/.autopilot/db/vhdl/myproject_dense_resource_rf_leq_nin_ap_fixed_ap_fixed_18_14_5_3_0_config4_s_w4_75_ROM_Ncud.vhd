-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_18_14_5_3_0_config4_s_w4_75_ROM_Ncud is 
    generic(
             DataWidth     : integer := 42; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_rf_leq_nin_ap_fixed_ap_fixed_18_14_5_3_0_config4_s_w4_75_ROM_Ncud is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000001000011000000000000000000001011001100", 1 => "110111011001111111111111111111101110010100", 2 => "000110011100111111111111111111110111110100", 3 => "111001001010111111111111111111110111100011", 
    4 => "111011011101111111111111111111110101000111", 5 => "000010111001111111111111111111110011111101", 6 => "111100110110111111111111111111111011011110", 7 => "001001101010000000000000000000000000101101", 
    8 => "110110011001111111111111111111111011011111", 9 => "110110111111111111111111111111110111000000", 10 => "000100111010000000000000000000001010100101", 11 => "110110100111111111111111111111111011011100", 
    12 => "000000100111000000000000000000001101011110", 13 => "110011100000000000000000000000001011110011", 14 => "001111100111111111111111111111110000010001", 15 => "111101001001111111111111111111110111011011", 
    16 => "110000101111000000000000000000000100001100", 17 => "000000101010000000000000000000001000001011", 18 => "001000111100111111111111111111110111001110", 19 => "001001111111111111111111111111110010111000", 
    20 => "101110100111111111111111111111110011101001", 21 => "110101000001000000000000000000000101010111", 22 => "000110001010000000000000000000000111110101", 23 => "000011101011111111111111111111110010111000", 
    24 => "000001001111000000000000000000001100110101", 25 => "000001001100000000000000000000001000111010", 26 => "111111111101000000000000000000001010110110", 27 => "110011101000000000000000000000001101010110", 
    28 => "111001010010111111111111111111110101001111", 29 => "110101001000111111111111111111111011000001", 30 => "000110010110111111111111111111111001101101", 31 => "000000111010111111111111111111111001111110", 
    32 => "000001100100111111111111111111111000100100", 33 => "001001100110111111111111111111110110010101", 34 => "111011101010111111111111111111101101010011", 35 => "000111111001111111111111111111101111010011", 
    36 => "001101010001000000000000000000001110110110", 37 => "111011110100111111111111111111110101101110", 38 => "000011010000111111111111111111111101010000", 39 => "001001111000111111111111111111111110101110", 
    40 => "111111011010000000000000000000000101111110", 41 => "111010010110000000000000000000001111100100", 42 => "000001010000000000000000000000001010111000", 43 => "000000100100000000000000000000001010111100", 
    44 => "111111110000000000000000000000000010101111", 45 => "000111111111111111111111111111111111000100", 46 => "110001111001111111111111111111101111100110", 47 => "111100001100000000000000000000000110101100", 
    48 => "111111110000000000000000000000010001000011", 49 => "111001001111111111111111111111110011001110", 50 => "111101101010000000000000000000000000101011", 51 => "111111010001111111111111111111111011010101", 
    52 => "001000000100000000000000000000000000011000", 53 => "001101110000111111111111111111101111011001", 54 => "111100110110111111111111111111110001100010", 55 => "000110011010111111111111111111110000001010", 
    56 => "001010010010000000000000000000000010001010", 57 => "000001101100000000000000000000001110110111", 58 => "000110111100000000000000000000000010001000", 59 => "000101011000111111111111111111111010001111", 
    60 => "000001010110111111111111111111110110001110", 61 => "110110000001000000000000000000001001100100", 62 => "001000101110000000000000000000000001011100", 63 => "111000001110111111111111111111111001110010");



attribute syn_rom_style : string;

attribute syn_rom_style of mem0 : signal is "block_rom"; 
attribute ROM_STYLE : string;

attribute ROM_STYLE of mem0 : signal is "block";

begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

